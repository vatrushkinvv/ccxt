// ----------------------------------------------------------------------------

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code
// EDIT THE CORRESPONDENT .ts FILE INSTEAD

import assert from 'assert';
import testSharedMethods from '../../../test/Exchange/base/test.sharedMethods.js';
async function testWatchOHLCVForSymbols(exchange, skippedProperties, symbol) {
    const method = 'testWatchOHLCVForSymbols';
    let now = exchange.milliseconds();
    const ends = now + 15000;
    const timeframeKeys = Object.keys(exchange.timeframes);
    assert(timeframeKeys.length, exchange.id + ' ' + method + ' - no timeframes found');
    // prefer 1m timeframe if available, otherwise return the first one
    let chosenTimeframeKey = '1m';
    if (!exchange.inArray(chosenTimeframeKey, timeframeKeys)) {
        chosenTimeframeKey = timeframeKeys[0];
    }
    const limit = 10;
    const duration = exchange.parseTimeframe(chosenTimeframeKey);
    const since = exchange.milliseconds() - duration * limit * 1000 - 1000;
    while (now < ends) {
        let response = undefined;
        try {
            response = await exchange.watchOHLCVForSymbols([[symbol, chosenTimeframeKey]], since, limit);
        }
        catch (e) {
            if (!testSharedMethods.isTemporaryFailure(e)) {
                throw e;
            }
            now = exchange.milliseconds();
            continue;
        }
        console.log(response);
        // assert (Array.isArray (response), exchange.id + ' ' + method + ' ' + symbol + ' must return an array. ' + exchange.json (response));
        now = exchange.milliseconds();
        // for (let i = 0; i < response.length; i++) {
        //     testOHLCV (exchange, skippedProperties, method, response[i], symbol, now);
        // }
    }
}
export default testWatchOHLCVForSymbols;
